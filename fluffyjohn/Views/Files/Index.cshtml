@using Microsoft.AspNetCore.Identity
@using fluffyjohn.Areas.Identity.Data
@using Microsoft.AspNetCore.Mvc;
@using fluffyjohn;

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "View Files";

    string? reqDirPath = (string)Url!.RouteUrl(ViewContext.RouteData.Values)!.Substring("viewfiles".Length + 1).Replace("//", "/");

    foreach (var character in reqDirPath) {
        reqDirPath = reqDirPath.Replace("//", "/");
    }

    if (reqDirPath.EndsWith("/") != true)
        reqDirPath += "/"; // Quick hack to remove the "/" prefixed in files and directory names

    string? encryptedUsername = SecurityUtils.MD5Hash(User.Identity!.Name!);

    string? rootUserDir = $"{Directory.GetCurrentDirectory()}/UserFileStorer/{encryptedUsername}/";
    string? currentTargetDir = $"{rootUserDir}/{reqDirPath}";

    string[] fileEntries = Directory.GetFiles(currentTargetDir);
    string[] dirEntries = Directory.GetDirectories(currentTargetDir);

    int fileEntryCount = fileEntries.Length;
    int dirEntryCount = dirEntries.Length;

    PathFormatter.FormatEntries(ref fileEntries, reqDirPath, rootUserDir);
    PathFormatter.FormatEntries(ref dirEntries, reqDirPath, rootUserDir);
}   

<head>
    <link rel="stylesheet" href="~/css/storage.css" />
    <link rel="stylesheet" href="~/css/toast.css" />
    <link rel="stylesheet" href="~/css/icons.css" />
</head>

<div id="toast-container"></div>
<h1>Contents</h1> <br />

<div id="dir-selector">
    <a class="dir-select" href="/viewfiles/">Home/</a>

</div> <br />

@{
    for (int i = 0; i < fileEntryCount; i++)
    {
        <div id="file-@i" class="item-entry-wrapper">@fileEntries[i]</div>

        <a class="item-action-btn" href=""> <img class="icon" src="~/svg/edit.svg" /> </a>
        <a class="item-action-btn" href=""> <img class="icon del-icon" src="~/svg/delete.svg" /> </a>
        <a class="item-action-btn" href="/downloadfile\@reqDirPath@fileEntries[i]"> <img class="icon" src="~/svg/download.svg" /> </a>
        <a class="item-action-btn" href="/viewcontent\@reqDirPath@fileEntries[i]"> <img class="icon" src="~/svg/view.svg" /> </a>

        <br />
    }
}

@{
    for (int i = 0; i <  dirEntryCount; i++)
    {
        string targetHref = $"/viewfiles/{reqDirPath}/{dirEntries[i]}";

        <div id="dir-@i" class="item-entry-wrapper itype-dir">
            <a href=@Utility.ConfigureDirHref(targetHref)>@dirEntries[i]/</a>
        </div>

        <button class="item-action-btn"> <img class="icon" style="width: 60%;" src="~/svg/edit.svg" /> </button>
        <button class="item-action-btn"> <img class="icon del-icon" style="width: 60%;" src="~/svg/delete.svg" /> </button>

        <br />
    }
}

<br />

<form action="/files/upload" method="post" enctype="multipart/form-data">
    <input type="file" name="uploads" multiple />
    <input type="submit" />
</form>

<script src="~/js/toast.js"></script>
<script src="~/js/dirselect.js"></script>
<script src="~/js/storage.js"></script>
